{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm-es5/shadow-css-bbdf056f-05cd1ccb.js"],"names":["__webpack_require__","r","__webpack_exports__","d","ShadowCss","scopeCss","this","strictStyling","prototype","shimCssText","cssText","scopeId","hostScopeId","slotScopeId","commentOriginalSelector","commentsWithHash","extractCommentsWithHash","stripComments","orgSelectors","processCommentedSelector_1","rule","placeholder","length","comment","selector","push","processRules","startsWith","content","scopedCssText","_scopeCssText","concat","join","forEach","_a","replace","_insertPolyfillHostInCssText","_convertColonHost","_convertColonHostContext","_convertColonSlotted","_convertShadowDOMSelectors","_scopeSelectors","trim","_convertColonRule","_cssColonHostRe","_colonHostPartReplacer","slotAttr","regExp","_cssColonSlottedRe","m","_i","arguments","compound","suffix","sel","_polyfillHostNoCombinator","_cssColonHostContextRe","_colonHostContextPartReplacer","partReplacer","parts","split","i","p","host","part","indexOf","_polyfillHost","_shadowDOMSelectorsRe","reduce","result","pattern","scopeSelector","hostSelector","slotSelector","_this","_scopeSelector","CssRule","strict","map","shallowPart","_selectorNeedsScoping","_applyStrictSelectorScope","_applySelectorScope","re","_makeScopeMatcher","test","lre","rre","RegExp","_selectorReSuffix","_applySimpleSelectorScope","_polyfillHostRe","lastIndex","replaceBy_1","_polyfillHostNoCombinatorRe","_","before","colon","after","isRe","className","_scopeSelectorPart","scopedP","t","matches","match","safeContent","SafeSelector","res","scopedSelector","startIndex","sep","hasHost","shouldScope","exec","separator","part_1","slice","index","scopedPart","substring","restore","_colonHostContextRe","_polyfillHostContext","_colonHostRe","_colonSlottedRe","_polyfillSlotted","placeholders","keep","replaceBy","_content","pseudo","exp","StringWithEscapedBlocks","escapedString","blocks","_parenSuffix","_commentRe","input","_commentWithHashRe","_ruleRe","_curlyRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","contentPrefix","inputParts","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","sc"],"mappings":"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","file":"js/chunk-2d0d3c26.8eee6e7a.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar ShadowCss = /** @class */ (function () {\n    function ShadowCss() {\n        this.strictStyling = true;\n    }\n    ShadowCss.prototype.shimCssText = function (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n        if (hostScopeId === void 0) { hostScopeId = ''; }\n        if (slotScopeId === void 0) { slotScopeId = ''; }\n        if (commentOriginalSelector === void 0) { commentOriginalSelector = false; }\n        var commentsWithHash = extractCommentsWithHash(cssText);\n        cssText = stripComments(cssText);\n        var orgSelectors = [];\n        if (commentOriginalSelector) {\n            var processCommentedSelector_1 = function (rule) {\n                var placeholder = \"/*!@___\" + orgSelectors.length + \"___*/\";\n                var comment = \"/*!@\" + rule.selector + \"*/\";\n                orgSelectors.push({ placeholder: placeholder, comment: comment });\n                rule.selector = placeholder + rule.selector;\n                return rule;\n            };\n            cssText = processRules(cssText, function (rule) {\n                if (rule.selector[0] !== '@') {\n                    return processCommentedSelector_1(rule);\n                }\n                else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                    rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                    rule.content = processRules(rule.content, processCommentedSelector_1);\n                    return rule;\n                }\n                return rule;\n            });\n        }\n        var scopedCssText = this._scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n        cssText = [scopedCssText].concat(commentsWithHash).join('\\n');\n        if (commentOriginalSelector) {\n            orgSelectors.forEach(function (_a) {\n                var placeholder = _a.placeholder, comment = _a.comment;\n                cssText = cssText.replace(placeholder, comment);\n            });\n        }\n        return cssText;\n    };\n    ShadowCss.prototype._scopeCssText = function (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n        // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n        cssText = this._insertPolyfillHostInCssText(cssText);\n        cssText = this._convertColonHost(cssText);\n        cssText = this._convertColonHostContext(cssText);\n        cssText = this._convertColonSlotted(cssText, slotScopeId);\n        cssText = this._convertShadowDOMSelectors(cssText);\n        if (scopeId) {\n            cssText = this._scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n        }\n        cssText = cssText.replace(/-shadowcsshost-no-combinator/g, \".\" + hostScopeId);\n        cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n        return cssText.trim();\n    };\n    /*\n     * convert a rule like :host(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar\n    */\n    ShadowCss.prototype._convertColonHost = function (cssText) {\n        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);\n    };\n    /*\n   * convert a rule like ::slotted(.foo) { }\n  */\n    ShadowCss.prototype._convertColonSlotted = function (cssText, slotAttr) {\n        var regExp = _cssColonSlottedRe;\n        return cssText.replace(regExp, function () {\n            var m = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                m[_i] = arguments[_i];\n            }\n            if (m[2]) {\n                var compound = m[2].trim();\n                var suffix = m[3];\n                var sel = '.' + slotAttr + ' > ' + compound + suffix;\n                return sel;\n            }\n            else {\n                return _polyfillHostNoCombinator + m[3];\n            }\n        });\n    };\n    /*\n     * convert a rule like :host-context(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar, .foo scopeName > .bar { }\n     *\n     * and\n     *\n     * :host-context(.foo:host) .bar { ... }\n     *\n     * to\n     *\n     * .foo<scopeName> .bar { ... }\n    */\n    ShadowCss.prototype._convertColonHostContext = function (cssText) {\n        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);\n    };\n    ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {\n        // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n        return cssText.replace(regExp, function () {\n            var m = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                m[_i] = arguments[_i];\n            }\n            if (m[2]) {\n                var parts = m[2].split(',');\n                var r = [];\n                for (var i = 0; i < parts.length; i++) {\n                    var p = parts[i].trim();\n                    if (!p)\n                        break;\n                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n                }\n                return r.join(',');\n            }\n            else {\n                return _polyfillHostNoCombinator + m[3];\n            }\n        });\n    };\n    ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {\n        if (part.indexOf(_polyfillHost) > -1) {\n            return this._colonHostPartReplacer(host, part, suffix);\n        }\n        else {\n            return host + part + suffix + ', ' + part + ' ' + host + suffix;\n        }\n    };\n    ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {\n        return host + part.replace(_polyfillHost, '') + suffix;\n    };\n    /*\n     * Convert combinators like ::shadow and pseudo-elements like ::content\n     * by replacing with space.\n    */\n    ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {\n        return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);\n    };\n    // change a selector like 'div' to 'name div'\n    ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector, slotSelector, commentOriginalSelector) {\n        var _this = this;\n        return processRules(cssText, function (rule) {\n            var selector = rule.selector;\n            var content = rule.content;\n            if (rule.selector[0] !== '@') {\n                selector =\n                    _this._scopeSelector(rule.selector, scopeSelector, hostSelector, slotSelector, _this.strictStyling);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector, slotSelector, commentOriginalSelector);\n            }\n            selector = selector.replace(/\\s{2,}/g, ' ').trim();\n            return new CssRule(selector, content);\n        });\n    };\n    ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, slotSelector, strict) {\n        var _this = this;\n        return selector.split(',')\n            .map(function (shallowPart) {\n            if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n                return shallowPart.trim();\n            }\n            if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n                return strict ?\n                    _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector).trim() :\n                    _this._applySelectorScope(shallowPart, scopeSelector, hostSelector).trim();\n            }\n            else {\n                return shallowPart.trim();\n            }\n        })\n            .join(', ');\n    };\n    ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {\n        var re = this._makeScopeMatcher(scopeSelector);\n        return !re.test(selector);\n    };\n    ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {\n        var lre = /\\[/g;\n        var rre = /\\]/g;\n        scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n        return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n    };\n    ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {\n        // Difference from webcomponents.js: scopeSelector could not be an array\n        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\n    };\n    // scope via name and [is=name]\n    ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {\n        // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n        _polyfillHostRe.lastIndex = 0;\n        if (_polyfillHostRe.test(selector)) {\n            var replaceBy_1 = this.strictStyling ? \".\" + hostSelector : scopeSelector;\n            return selector\n                .replace(_polyfillHostNoCombinatorRe, function (_, selector) {\n                return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n                    return before + replaceBy_1 + colon + after;\n                });\n            })\n                .replace(_polyfillHostRe, replaceBy_1 + ' ');\n        }\n        return scopeSelector + ' ' + selector;\n    };\n    ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {\n        var _this = this;\n        var isRe = /\\[is=([^\\]]*)\\]/g;\n        scopeSelector = scopeSelector.replace(isRe, function (_) {\n            var parts = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                parts[_i - 1] = arguments[_i];\n            }\n            return parts[0];\n        });\n        var className = '.' + scopeSelector;\n        var _scopeSelectorPart = function (p) {\n            var scopedP = p.trim();\n            if (!scopedP) {\n                return '';\n            }\n            if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n                scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n            }\n            else {\n                // remove :host since it should be unnecessary\n                var t = p.replace(_polyfillHostRe, '');\n                if (t.length > 0) {\n                    var matches = t.match(/([^:]*)(:*)(.*)/);\n                    if (matches) {\n                        scopedP = matches[1] + className + matches[2] + matches[3];\n                    }\n                }\n            }\n            return scopedP;\n        };\n        var safeContent = new SafeSelector(selector);\n        selector = safeContent.content();\n        var scopedSelector = '';\n        var startIndex = 0;\n        var res;\n        var sep = /( |>|\\+|~(?!=))\\s*/g;\n        // If a selector appears before :host it should not be shimmed as it\n        // matches on ancestor elements and not on elements in the host's shadow\n        // `:host-context(div)` is transformed to\n        // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n        // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n        // Historically `component-tag:host` was matching the component so we also want to preserve\n        // this behavior to avoid breaking legacy apps (it should not match).\n        // The behavior should be:\n        // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n        // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n        //   `:host-context(tag)`)\n        var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n        // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n        var shouldScope = !hasHost;\n        while ((res = sep.exec(selector)) !== null) {\n            var separator = res[1];\n            var part_1 = selector.slice(startIndex, res.index).trim();\n            shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;\n            var scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;\n            scopedSelector += scopedPart + \" \" + separator + \" \";\n            startIndex = sep.lastIndex;\n        }\n        var part = selector.substring(startIndex);\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n        // replace the placeholders with their original values\n        return safeContent.restore(scopedSelector);\n    };\n    ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {\n        selector = selector\n            .replace(_colonHostContextRe, _polyfillHostContext)\n            .replace(_colonHostRe, _polyfillHost)\n            .replace(_colonSlottedRe, _polyfillSlotted);\n        return selector;\n    };\n    return ShadowCss;\n}());\nvar SafeSelector = /** @class */ (function () {\n    function SafeSelector(selector) {\n        var _this = this;\n        this.placeholders = [];\n        this.index = 0;\n        // Replaces attribute selectors with placeholders.\n        // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n        selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n            var replaceBy = \"__ph-\" + _this.index + \"__\";\n            _this.placeholders.push(keep);\n            _this.index++;\n            return replaceBy;\n        });\n        // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n        // WS and \"+\" would otherwise be interpreted as selector separators.\n        this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n            var replaceBy = \"__ph-\" + _this.index + \"__\";\n            _this.placeholders.push(exp);\n            _this.index++;\n            return pseudo + replaceBy;\n        });\n    }\n    SafeSelector.prototype.restore = function (content) {\n        var _this = this;\n        return content.replace(/__ph-(\\d+)__/g, function (_, index) { return _this.placeholders[+index]; });\n    };\n    SafeSelector.prototype.content = function () { return this._content; };\n    return SafeSelector;\n}());\nvar CssRule = /** @class */ (function () {\n    function CssRule(selector, content) {\n        this.selector = selector;\n        this.content = content;\n    }\n    return CssRule;\n}());\nvar StringWithEscapedBlocks = /** @class */ (function () {\n    function StringWithEscapedBlocks(escapedString, blocks) {\n        this.escapedString = escapedString;\n        this.blocks = blocks;\n    }\n    return StringWithEscapedBlocks;\n}());\nvar _polyfillHost = '-shadowcsshost';\nvar _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nvar _polyfillHostContext = '-shadowcsscontext';\nvar _parenSuffix = ')(?:\\\\((' +\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n    ')\\\\))?([^,{]*)';\nvar _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nvar _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nvar _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [\n    /::shadow/g,\n    /::content/g\n];\nvar _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar _colonHostRe = /:host/gim;\nvar _colonSlottedRe = /::slotted/gim;\nvar _colonHostContextRe = /:host-context/gim;\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = function (input) {\n    return input.replace(_commentRe, '');\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = function (input) {\n    return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar OPEN_CURLY = '{';\nvar CLOSE_CURLY = '}';\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\nvar processRules = function (input, ruleCallback) {\n    var inputWithEscapedBlocks = escapeBlocks(input);\n    var nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        var selector = m[2];\n        var content = '';\n        var suffix = m[4];\n        var contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        var rule = ruleCallback(new CssRule(selector, content));\n        return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\n    });\n};\nvar escapeBlocks = function (input) {\n    var inputParts = input.split(_curlyRe);\n    var resultParts = [];\n    var escapedBlocks = [];\n    var bracketCount = 0;\n    var currentBlockParts = [];\n    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        var part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n};\nvar scopeCss = function (cssText, scopeId, commentOriginalSelector) {\n    var sc = new ShadowCss();\n    return sc.shimCssText(cssText, scopeId, scopeId + '-h', scopeId + '-s', commentOriginalSelector);\n};\nexport { ShadowCss, scopeCss };\n"],"sourceRoot":""}